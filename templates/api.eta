<%
const { apiConfig, routes, utils, config } = it;
const { info, servers, externalDocs } = apiConfig;
const { _, require, formatDescription } = utils;

const server = (servers && servers[0]) || { url: "" };

const descriptionLines = _.compact([
  `@title ${info.title || "No title"}`,
  info.version && `@version ${info.version}`,
  info.license && `@license ${_.compact([
    info.license.name,
    info.license.url && `(${info.license.url})`,
  ]).join(" ")}`,
  info.termsOfService && `@termsOfService ${info.termsOfService}`,
  server.url && `@baseUrl ${server.url}`,
  externalDocs.url && `@externalDocs ${externalDocs.url}`,
  info.contact && `@contact ${_.compact([
    info.contact.name,
    info.contact.email && `<${info.contact.email}>`,
    info.contact.url && `(${info.contact.url})`,
  ]).join(" ")}`,
  info.description && " ",
  info.description && _.replace(formatDescription(info.description), /\n/g, "\n * "),
]);

%>

export type Flatten<T> = T extends any[] ? T[number] : T;
export type ChangeTypeOfKeys<T extends object, Keys extends keyof T, NewType> = { [key in keyof T]: key extends Keys ? NewType : T[key] };
export type MapObjectKeysToTrue<ObjectType> = ObjectType extends Record<PropertyKey, any> 
? {
  [key in keyof ObjectType]?: ObjectType[key] extends Record<PropertyKey, any>
    ? true | MapObjectKeysToTrue<Flatten<ObjectType[key]>>
    : true
  }
: true
export type FetchKeysType = { [key: PropertyKey]: true | FetchKeysType }
export type FetchKeys<ResponseModel> = ResponseModel extends { count?: number, results?: Array<infer DataModel> }
  ? MapObjectKeysToTrue<DataModel>
  : MapObjectKeysToTrue<Flatten<ResponseModel>>;

export type NestedSafePick<ResponseModel, FetchKeysType> = ResponseModel extends Array<infer Model>
  ? NestedSafePick<Model, FetchKeysType>[]
  : {
      [key in keyof FetchKeysType]: FetchKeysType[key] extends Record<PropertyKey, any>
        ? key extends keyof ResponseModel
          ? ResponseModel[key] extends Array<infer DataModel>
            ? NestedSafePick<DataModel, FetchKeysType[key]>[]
            : NestedSafePick<ResponseModel[key], FetchKeysType[key]>
          : never
        : key extends keyof ResponseModel
          ? ResponseModel[key] extends Array<infer DataModel>
            ? DataModel[]
            : ResponseModel[key]
          : never
    };

export type PickKeys<ResponseModel, FetchKeysType> = 
  FetchKeysType extends Record<string, never>
    ? ResponseModel
    : ResponseModel extends {
        count?: number
        results?: Array<infer DataModel>
      }
        ? ChangeTypeOfKeys<
            ResponseModel,
            'results',
            NestedSafePick<DataModel, FetchKeysType>[]
          >
        : ResponseModel extends Array<infer DataModel>
          ? NestedSafePick<DataModel, FetchKeysType>[]
          : NestedSafePick<ResponseModel, FetchKeysType>

function postprocessQuery(query?: any) {
  if (!query) return query

  const parsedQuery = query
  if (query.fetchKeys) {
    function getStringifiedQueryKeys(keys: FetchKeysType) {
      let query = '{'
      Object.entries(keys)
        .forEach(([key, value], index) => {
          if (typeof value === 'object') {
            const keyToAdd = `${key}${getStringifiedQueryKeys(value)}`
            query += index > 0 ? `,${keyToAdd}` : keyToAdd
          } else {
            query += index > 0 ? `,${key}` : key
          }
      })
      return query + '}'
    }

    parsedQuery.query = getStringifiedQueryKeys(query.fetchKeys)
  }

  delete parsedQuery.fetchKeys
  return parsedQuery
}

<% if (config.httpClientType === config.constants.HTTP_CLIENT.AXIOS) { %> import { AxiosRequestConfig, AxiosResponse } from "axios"; <% } %>

<% if (descriptionLines.length) { %>
/**
<% descriptionLines.forEach((descriptionLine) => { %>
* <%~ descriptionLine %>

<% }) %>
*/
<% } %>
export class Api<SecurityDataType extends unknown><% if (!config.singleHttpClient) { %> extends HttpClient<SecurityDataType> <% } %> {

<% if(config.singleHttpClient) { %>
  constructor (private http: HttpClient<SecurityDataType>) {}
<% } %>


<% routes.outOfModule && routes.outOfModule.forEach((route) => { %>

        <%~ includeFile('./procedure-call.eta', { ...it, route }) %>

<% }) %>

<% routes.combined && routes.combined.forEach(({ routes = [], moduleName }) => { %>
    <%~ moduleName %> = {
    <% routes.forEach((route) => { %>

        <%~ includeFile('./procedure-call.eta', { ...it, route }) %>

    <% }) %>
    }
<% }) %>
}
